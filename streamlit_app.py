{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO601TD2emdHEOaovwxhD3j",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RedRusa2282/dashboard/blob/main/streamlit_app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3LEZgtm2ltEr"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from math import pi\n",
        "import base64\n",
        "from PIL import Image\n",
        "from pandas.tseries.offsets import DateOffset\n",
        "\n",
        "# Enable wide mode\n",
        "st.set_page_config(layout=\"wide\")\n",
        "\n",
        "# Load data from CSV\n",
        "df = pd.read_csv('./data/chat_data.csv')\n",
        "df['timestamp'] = pd.to_datetime(df['timestamp'])\n",
        "\n",
        "# Define function to create heatmap for given time delta\n",
        "def create_heatmap(df, time_delta):\n",
        "    # Filter data for the specified time period\n",
        "    end_date = df['timestamp'].max()\n",
        "    start_date = end_date - pd.Timedelta(days=time_delta)\n",
        "    filtered_df = df[(df['timestamp'] >= start_date) & (df['timestamp'] <= end_date)]\n",
        "\n",
        "    # Extract day of the week and 2-hour intervals\n",
        "    filtered_df['day_of_week'] = filtered_df['timestamp'].dt.day_name()\n",
        "    filtered_df['hour'] = filtered_df['timestamp'].dt.hour\n",
        "    filtered_df['hour_group'] = pd.cut(filtered_df['hour'], bins=np.arange(0, 25, 2), right=False, labels=[f\"{i}-{i+2}\" for i in range(0, 24, 2)])\n",
        "\n",
        "    # Set order for days of the week\n",
        "    ordered_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n",
        "    filtered_df['day_of_week'] = pd.Categorical(filtered_df['day_of_week'], categories=ordered_days, ordered=True)\n",
        "\n",
        "    # Pivot the DataFrame\n",
        "    df_pivot = filtered_df.pivot_table(index='day_of_week', columns='hour_group', values='timestamp', aggfunc='count', fill_value=0)\n",
        "\n",
        "    # Create the heatmap\n",
        "    plt.figure(figsize=(10, 7))\n",
        "    sns.heatmap(df_pivot, annot=True, fmt=\"d\", cmap=\"YlGnBu\")\n",
        "    plt.title(f\"Weekly Activity Heatmap for Last {time_delta} Days\")\n",
        "    plt.xlabel(\"2-Hour Interval\")\n",
        "    plt.ylabel(\"Day of the Week\")\n",
        "    plt.xticks(rotation=45)\n",
        "    st.pyplot()\n",
        "\n",
        "def sentiment_analysis(df, period, period_title):\n",
        "    \"\"\"\n",
        "    Performs sentiment analysis based on the period provided and plots a radar chart.\n",
        "    :param df: DataFrame with the data\n",
        "    :param period: A string specifying the period ('week', 'month', or '3month')\n",
        "    :param period_title: A descriptive title for the period\n",
        "    \"\"\"\n",
        "    # Get the most recent date in your dataset\n",
        "    end_date = df['timestamp'].max()\n",
        "    start_date = end_date - pd.Timedelta(days=6)  # Calculate the start date for the last 7 days\n",
        "\n",
        "    # Filter the DataFrame for the last 7 days\n",
        "    recent_week_df = df[(df['timestamp'] >= start_date) & (df['timestamp'] <= end_date)]\n",
        "\n",
        "    # Adjust the pivot table generation based on the period\n",
        "    if period == 'week':\n",
        "        # Aggregate data over the last 7 days\n",
        "        pivot_data = recent_week_df.pivot_table(columns='sentiment', values='timestamp', aggfunc='count').sum().to_frame().T\n",
        "    elif period == 'month':\n",
        "        # Here, instead of using day, use week of the month for grouping\n",
        "        df['week_of_month'] = df['timestamp'].dt.isocalendar().week - df['timestamp'].dt.isocalendar().week.min() + 1\n",
        "        pivot_data = df.pivot_table(index='week_of_month', columns='sentiment', values='timestamp', aggfunc='count').head(4)  # Limit to the first 4 weeks\n",
        "\n",
        "    elif period == '3month':\n",
        "        df['month_year'] = df['timestamp'].dt.to_period('M')\n",
        "        pivot_data = df.pivot_table(index='month_year', columns='sentiment', values='timestamp', aggfunc='count').iloc[-3:]\n",
        "\n",
        "    # Convert pivot_data to a format suitable for radar chart\n",
        "    categories = list(pivot_data.columns)\n",
        "    N = len(categories)\n",
        "\n",
        "    # Calculate the angles for the radar chart\n",
        "    angles = [n / float(N) * 2 * np.pi for n in range(N)]\n",
        "    angles += angles[:1]\n",
        "\n",
        "    # Radar chart setup\n",
        "    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\n",
        "\n",
        "    # Draw one axe per sentiment\n",
        "    for idx, row in pivot_data.iterrows():\n",
        "        values = row.tolist()\n",
        "        values += values[:1]  # Repeat the first value to close the circle\n",
        "        ax.plot(angles, values, linewidth=1, linestyle='solid', label=idx)\n",
        "        ax.fill(angles, values, alpha=0.2)\n",
        "\n",
        "    # Add labels with emojis for each sentiment\n",
        "    emoji_dict = {\n",
        "        \"Positive\": \"😃\",\n",
        "        \"Neutral\": \"😐\",\n",
        "        \"Negative\": \"😢\",\n",
        "    }\n",
        "\n",
        "    labels = [emoji_dict.get(cat, cat) for cat in categories]  # Replace category with emoji if available\n",
        "\n",
        "    ax.set_xticks(angles[:-1])\n",
        "    ax.set_xticklabels(labels)  # Use labels with emojis\n",
        "\n",
        "    # Add legend and title\n",
        "    plt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n",
        "    plt.title(f'Sentiment Analysis ({period_title})')\n",
        "\n",
        "    # Display the chart\n",
        "    st.pyplot(fig)\n",
        "\n",
        "# Utility function to get start date based on time period\n",
        "def get_start_date(end_date, period):\n",
        "    if period == 'week':\n",
        "        return end_date - DateOffset(days=7)\n",
        "    elif period == 'month':\n",
        "        return end_date - DateOffset(months=1)\n",
        "    elif period == '3months':\n",
        "        return end_date - DateOffset(months=3)\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# Updated line_graph function\n",
        "def line_graph(df, period):\n",
        "    end_date = df['timestamp'].max()\n",
        "    start_date = get_start_date(end_date, period)\n",
        "\n",
        "    if period == 'week':\n",
        "        period_data = df[(df['timestamp'] >= start_date) & (df['timestamp'] <= end_date)]\n",
        "        counts = period_data.groupby(period_data['timestamp'].dt.date).size()\n",
        "        counts.index = pd.to_datetime(counts.index)\n",
        "        x_labels = counts.index.strftime('%A')\n",
        "\n",
        "        # Calculate the number of users per day\n",
        "        users_per_day = period_data.groupby(period_data['timestamp'].dt.date)['user_id'].nunique()\n",
        "\n",
        "    elif period == 'month':\n",
        "        period_data = df[(df['timestamp'] >= start_date) & (df['timestamp'] <= end_date)]\n",
        "        period_data['week_of_month'] = period_data['timestamp'].apply(lambda x: (x.day - 1) // 7 + 1)\n",
        "        counts = period_data.groupby('week_of_month').size()\n",
        "        x_labels = range(1, 6)\n",
        "\n",
        "        # Calculate the number of users per week\n",
        "        users_per_week = period_data.groupby('week_of_month')['user_id'].nunique()\n",
        "\n",
        "    elif period == '3months':\n",
        "        period_data = df[(df['timestamp'] >= start_date) & (df['timestamp'] <= end_date)]\n",
        "        counts = period_data.groupby(period_data['timestamp'].dt.to_period('M')).size()\n",
        "        counts.index = counts.index.to_timestamp()\n",
        "        x_labels = counts.index.strftime('%Y-%m')\n",
        "\n",
        "        # Calculate the number of users per month\n",
        "        users_per_month = period_data.groupby(period_data['timestamp'].dt.to_period('M'))['user_id'].nunique()\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.plot(counts.index, counts.values, marker='o', label='Number of Queries', linestyle='-', color='blue')\n",
        "    plt.title(f'Queries and Users in the Latest {period.capitalize()}')\n",
        "    plt.xlabel('Time Period')\n",
        "    plt.ylabel('Count')\n",
        "    plt.xticks(ticks=counts.index, labels=x_labels, rotation=45)\n",
        "\n",
        "    # Plot the number of users on the same graph\n",
        "    if period == 'week':\n",
        "        plt.plot(users_per_day.index, users_per_day.values, marker='s', linestyle='--', color='red', label='Number of Users')\n",
        "    elif period == 'month':\n",
        "        plt.plot(users_per_week.index, users_per_week.values, marker='s', linestyle='--', color='red', label='Number of Users')\n",
        "    elif period == '3months':\n",
        "        plt.plot(users_per_month.index, users_per_month.values, marker='s', linestyle='--', color='red', label='Number of Users')\n",
        "\n",
        "    plt.legend(loc='upper left', bbox_to_anchor=(0.7, 1.0))  # Adjust legend position\n",
        "    plt.grid(True)\n",
        "    st.pyplot()\n",
        "\n",
        "def plot_error_types_distribution(df, time_period):\n",
        "    # Set time period start and end dates\n",
        "    end_date = df['timestamp'].max()\n",
        "\n",
        "    if time_period == '1W':\n",
        "        start_date = end_date - pd.DateOffset(days=6)\n",
        "    elif time_period == '1M':\n",
        "        start_date = end_date - pd.DateOffset(days=30)\n",
        "    elif time_period == '3M':\n",
        "        start_date = end_date - pd.DateOffset(months=2)\n",
        "\n",
        "    # Convert start_date to Timestamp\n",
        "    start_date = pd.Timestamp(start_date)\n",
        "\n",
        "    # Filter data for the specified time period\n",
        "    time_period_data = df[(df['timestamp'] >= start_date) & (df['timestamp'] <= end_date)]\n",
        "\n",
        "    # Determine the appropriate grouping and title based on time period\n",
        "    if time_period == '1W':\n",
        "        days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n",
        "        grouping_column = time_period_data['timestamp'].dt.strftime('%A')\n",
        "        title = 'Error Types Distribution Over the Last 7 Days'\n",
        "        xlabel = 'Count'\n",
        "        ylabel = 'Day of the Week'\n",
        "    elif time_period == '1M':\n",
        "        num_weeks = (time_period_data['timestamp'].dt.day - 1).max() // 7 + 1\n",
        "        grouping_column = (time_period_data['timestamp'].dt.day - 1) // 7 + 1\n",
        "        title = 'Error Types Distribution Over the Last 1 Month'\n",
        "        xlabel = 'Count'\n",
        "        ylabel = 'Weeks of the Month'\n",
        "    elif time_period == '3M':\n",
        "        grouping_column = time_period_data['timestamp'].dt.strftime('%B %Y')\n",
        "        title = 'Error Types Distribution Over the Last 3 Months'\n",
        "        xlabel = 'Count'\n",
        "        ylabel = 'Month'\n",
        "\n",
        "    # Group by 'type_of_error' and count each type for the specified time period\n",
        "    error_counts = time_period_data.pivot_table(index=grouping_column, columns='type_of_error', values='error', aggfunc='sum', fill_value=0)\n",
        "\n",
        "    # Create a horizontal stacked bar chart for the error types\n",
        "    plt.figure(figsize=(12, 6))\n",
        "    sns.set_palette(\"Set2\")  # Use a color palette\n",
        "    ax = error_counts.plot(kind='barh', stacked=True)\n",
        "\n",
        "    plt.title(title)\n",
        "    plt.xlabel(xlabel)\n",
        "    plt.ylabel(ylabel)\n",
        "    plt.legend(title='Error Type', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "\n",
        "    if time_period == '1W':\n",
        "        ax.set_yticks(range(len(days_order)))  # Set ticks for all days\n",
        "        ax.set_yticklabels(days_order)  # Set correct order of days\n",
        "\n",
        "    # Remove top and right spines\n",
        "    ax.spines['top'].set_visible(False)\n",
        "    ax.spines['right'].set_visible(False)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    st.pyplot()\n",
        "\n",
        "# UI Layout\n",
        "def main_layout():\n",
        "    with st.sidebar:\n",
        "        st.image(logo, width=300)\n",
        "        st.title(\"Navigation\")\n",
        "        st.markdown(\"---\")\n",
        "\n",
        "        if st.button(\"📊 Dashboard\"):\n",
        "            st.session_state['current_tab'] = 'Dashboard'\n",
        "        if st.button(\"💬 Conversation\"):\n",
        "            st.session_state['current_tab'] = 'Conversation'\n",
        "\n",
        "        st.markdown(\"---\")\n",
        "        st.markdown(\"## About\")\n",
        "        st.info(\"Devan & Company's data scientists and analysts are trained experts in analyzing, cleaning and transforming your data to create models that highlight the most relevant information pertaining to your business.\")\n",
        "\n",
        "    if st.session_state['current_tab'] == 'Conversation':\n",
        "        conversation_tab()\n",
        "    elif st.session_state['current_tab'] == 'Dashboard':\n",
        "        dashboard_tab()\n",
        "\n",
        "def conversation_tab():\n",
        "    st.subheader(\"Chat\")\n",
        "    st.write(df.sort_values(by='timestamp', ascending=False))\n",
        "\n",
        "def dashboard_tab():\n",
        "    st.subheader(\"Dashboard\")\n",
        "    time_delta_option = st.selectbox(\"Select Time Period\", [\"1 week\", \"1 month\", \"3 months\"])\n",
        "    time_delta = {\"1 week\": 7, \"1 month\": 30, \"3 months\": 90}[time_delta_option]\n",
        "\n",
        "    col1, col2 = st.columns(2)\n",
        "    with col1:\n",
        "        create_heatmap(df, time_delta)\n",
        "    with col2:\n",
        "        if time_delta_option == \"1 week\":\n",
        "            sentiment_analysis(df, 'week', 'Day of the Week')\n",
        "        elif time_delta_option == \"1 month\":\n",
        "            sentiment_analysis(df, 'month', 'Week of the Month')\n",
        "        elif time_delta_option == \"3 months\":\n",
        "            sentiment_analysis(df, '3month', 'Month')\n",
        "    col3, col4 = st.columns(2)\n",
        "    with col3:\n",
        "        if time_delta_option == \"1 week\":\n",
        "            line_graph(df, 'week')\n",
        "        elif time_delta_option == \"1 month\":\n",
        "            line_graph(df, 'month')\n",
        "        elif time_delta_option == \"3 months\":\n",
        "            line_graph(df, '3months')\n",
        "    with col4:\n",
        "        if time_delta_option == \"1 week\":\n",
        "            plot_error_types_distribution(df, time_period='1W')\n",
        "\n",
        "        elif time_delta_option == \"1 month\":\n",
        "            plot_error_types_distribution(df, time_period='1M')\n",
        "\n",
        "        elif time_delta_option == \"3 months\":\n",
        "            plot_error_types_distribution(df, time_period='3M')\n",
        "\n",
        "def get_base64_encoded_image(image_path):\n",
        "    with open(image_path, \"rb\") as img_file:\n",
        "        return base64.b64encode(img_file.read()).decode('utf-8')\n",
        "\n",
        "def set_background(image_file):\n",
        "    bin_str = get_base64_encoded_image(image_file)\n",
        "    page_bg_img = f'''\n",
        "    <style>\n",
        "    .stApp {{\n",
        "        background-image: url(\"data:image/png;base64,{bin_str}\");\n",
        "        background-size: cover;\n",
        "    }}\n",
        "    </style>\n",
        "    '''\n",
        "    st.markdown(page_bg_img, unsafe_allow_html=True)\n",
        "\n",
        "# Call the function to add the background\n",
        "set_background('./source/background.jpg')\n",
        "\n",
        "# Initialize session state\n",
        "if 'current_tab' not in st.session_state:\n",
        "    st.session_state['current_tab'] = 'Dashboard'\n",
        "\n",
        "# Load your company logo\n",
        "logo = Image.open('./source/devan&company.png')\n",
        "\n",
        "# Main\n",
        "main_layout()"
      ]
    }
  ]
}